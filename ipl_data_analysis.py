# -*- coding: utf-8 -*-
"""IPL Data Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NMq0XrFeUP43_pdpvhc_Ftn-K6WFNsKu
"""

!pip install plotly --user

"""#Importing libraries"""

import pandas as pd # data processing
import numpy as np # linear algebra
import matplotlib.pyplot as plt
import seaborn as sns
import plotly
import plotly.express as px
import plotly.graph_objs as go
from plotly.offline import init_notebook_mode, plot, iplot
from plotly import tools
from warnings import filterwarnings
filterwarnings('ignore')

"""#Importing Data set"""

ball_data = pd.read_csv("IPL Ball-by-Ball 2008-2020.csv")
  match_data = pd.read_csv("IPL Matches 2008-2020.csv")
  print("Data ready for exploration")

match_data.head()

ball_data.head()

match_data.isnull().sum()

match_data.shape

match_data.columns

print('Total Matches Played:',match_data.shape[0])
print(' \n Venues Played At:',match_data['city'].unique())
print(' \n Teams :',match_data['team1'].unique())

"""#1) Number of matches played in various seasons :"""

match_data['Season'] = pd.DatetimeIndex(match_data['date']).year
match_data.head()

import pandas as pd
match_data['Season'] = pd.to_datetime(match_data['date']).dt.year

match_per_season = match_data.groupby(['Season'])['id'].count().reset_index().rename(columns={'id': 'matches'})
match_per_season

colors = ['turquoise',] * 13
colors[5] = 'crimson'

fig=px.bar(data_frame=match_per_season,x=match_per_season.Season,y=match_per_season.matches,labels=dict(x="Season",y="Count"),)
fig.update_layout(title="Number of matches played in different seasons ",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""###Each season, almost 60 matches were played. However, we see a spike in the number of matches from 2011 to 2013. This is because two new franchises, the Pune Warriors and Kochi Tuskers Kerala, were introduced, increasing the number of teams to 10.

#2) Total number of runs scored across seasons
"""

season_data=match_data[['id','date', 'Season']].merge(ball_data, left_on = 'id', right_on = 'id', how = 'left').drop('id', axis = 1)
season_data.head()

Season = season_data.groupby(['Season'])['total_runs'].sum().reset_index()
p = Season.set_index('Season')
fig = px.line(p, x=p.index, y="total_runs")
fig.update_layout(title="Total Runs Across the Seasons ",
                  titlefont={'size': 26},template='simple_white'  )

fig.show()

"""###Season 2013 was the highest scoring season (22,541 runs), followed by 2012 (22,453 runs)
Season 2009 was the lowest scoring season (16,320 runs).

# Runs scored per match across seasons
"""

runs_per_season=pd.concat([match_per_season,Season.iloc[:,1]],axis=1)
runs_per_season['Runs scored per match']=runs_per_season['total_runs']/runs_per_season['matches']
runs_per_season.set_index('Season',inplace=True)
print(runs_per_season)

fig = px.line(runs_per_season, x=runs_per_season.index, y="Runs scored per match")
fig.update_layout(title="Runs scored per match across seasons",
                  titlefont={'size': 26},template='simple_white')
fig.show()

"""###In season 2018, runs scored per match was 331.683333 which was highest among others.
In season 2009, runs scored per match was 286.315789 which was lowest till now.

#4) Count of matches by umpires
"""

ump=pd.concat([match_data['umpire1'],match_data['umpire2']])
ump=ump.value_counts()
umps=ump.to_frame().reset_index()
ump.head(10)

"""###S Ravi has umpired in 121 matches, followed by Dharmasena who has umpired in 94 matches.

#Number of tosses won by teams
"""

match_data['toss_winner'].value_counts()

toss=match_data['toss_winner'].value_counts()
colors = ['turquoise',] * 15
colors[0] = 'crimson'
fig=px.bar( y=toss,x=toss.index,labels=dict(x="Season",y="Count"),)
fig.update_layout(title="No. of tosses won by each team",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""###Mumbai Indians have won the most tosses, followed by Kolkata Knight Riders

#Decision made after winning the toss
"""

temp_series = match_data.toss_decision.value_counts()
labels = (np.array(temp_series.index))
values = (np.array((temp_series / temp_series.sum())*100))
colors = ['turquoise', 'crimson']
fig = go.Figure(data=[go.Pie(labels=labels,
                             values=values,hole=.3)])
fig.update_traces(hoverinfo='label+percent', textinfo='label+percent', textfont_size=20,
                  marker=dict(colors=colors, line=dict(color='#000000', width=3)))
fig.update_layout(title="Toss decision percentage",
                  titlefont={'size': 30},)

fig.show()

"""###After winning the toss, team tends to field first

#7) Toss decision across seasons
"""

match_data.head()

fig=px.histogram(data_frame=match_data,x='Season',color='toss_decision',color_discrete_sequence=colors,barmode='group')
fig.update_layout(title="Toss decision in different seasons",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1)
fig.show()

"""###Most of the times, teams decide to feild first except in season 2009,2010,2013 where teams decided to bat first mostly.
Since 2014, teams have overwhelmingly chosen to bat second. Especially since 2016, teams have chosen to field for more than 80% of the times except in season 2020.

#8)Winning toss implies winning game
"""

match_data['toss_win_game_win'] = np.where((match_data.toss_winner == match_data.winner),'Yes','No')
match_data.head(20)

labels =["Yes",'No']
values = match_data['toss_win_game_win'].value_counts()
colors = ['turquoise', 'crimson']
fig = go.Figure(data=[go.Pie(labels=labels,
                             values=values,hole=.3)])
fig.update_traces(hoverinfo='label+percent', textinfo='label+percent', textfont_size=20,
                  marker=dict(colors=colors, line=dict(color='#000000', width=3)))
fig.update_layout(title="Winning toss implies winning macthes?",
                  titlefont={'size': 30})
fig.show()

"""###Though winning toss gives you an advantage but it doesn't significantly implies that winning the toss helps in winning the game.

#9) Match win result
"""

match_data['result'].value_counts()

"""###We can see that 435 out of 816 matches was won by team batting second while 364 matches was won by team batting first.

#10) Number of times team have won the tournament
"""

winning_teams = match_data[['Season','winner']]

#dictionaries to get winners to each season
winners_team = {}
for i in sorted(winning_teams.Season.unique()):
    winners_team[i] = winning_teams[winning_teams.Season == i]['winner'].tail(1).values[0]

winners_of_IPL = pd.Series(winners_team)
winners_of_IPL = pd.DataFrame(winners_of_IPL, columns=['team'])

winners_of_IPL.value_counts().index

colors = ['turquoise',] * 6
colors[0] = 'crimson'
fig=px.bar( y=winners_of_IPL['team'].value_counts(),x=winners_of_IPL['team'].value_counts().index,labels=dict(x="Team Name",y="Count"),)
fig.update_layout(title="Winners of IPL",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""#11) Total number of matches played by a team"""

matches_played_byteams=pd.concat([match_data['team1'],match_data['team2']],axis=1)
teams=(matches_played_byteams['team1'].value_counts()+matches_played_byteams['team2'].value_counts()).reset_index()
teams.columns=['Team Name','Total Matches played']
teams.sort_values(by=['Total Matches played'],ascending=False).reset_index().drop('index',axis=1)

wins=pd.DataFrame(match_data['winner'].value_counts()).reset_index()
wins.columns=['Team Name','Wins']
wins

played=teams.merge(wins,left_on='Team Name',right_on='Team Name',how='inner')
played['% Win']=(played['Wins']/played['Total Matches played'])*100
played.sort_values(by=['% Win'],ascending=False).reset_index().drop('index',axis=1)

colors = ['turquoise',] * 15
colors[8] = 'crimson'
fig=px.bar(x=played['Team Name'],y=played['Total Matches played'],labels=dict(x="Team Name",y="Count"),)
fig.update_layout(title="Total number of matches played",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""#12) Most number of wins"""

colors = ['turquoise',] * 15
colors[8] = 'crimson'
fig=px.bar(x=played['Team Name'],y=played['Wins'],labels=dict(x="Team Name",y="Count"),)
fig.update_layout(title="Total Win by teams",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""###Mumbai Indians had won the most matches(120), followed by Chennai Super Kings (106)

#13) Win % by teams
"""

colors = ['turquoise',] * 15
colors[-4] = 'crimson'
fig=px.bar(x=played['Team Name'],y=played['% Win'],labels=dict(x="Team Name",y="Count"),)
fig.update_layout(title="Win % by teams",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""####Rising Pune Supergiants have the highest win % of 62.50, followed by Chennai Super kings and Mumbai Indians.
This is largely due to the fact that they had played really few matches.

#14) Lucky Venues for a team
"""

def lucky(match_data,team_name):
    return match_data[match_data['winner']==team_name]['venue'].value_counts().nlargest(10)

mi=lucky(match_data,'Mumbai Indians')
values = mi
labels=mi.index
colors = ['turquoise', 'crimson']
fig = go.Figure(data=[go.Pie(labels=labels,values=values,hole=.3)])
fig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,
                  marker=dict(colors=colors, line=dict(color='#000000', width=3)))
fig.update_layout(title="Wins at different Venues for MI:",
                  titlefont={'size': 30},
                  )
fig.show()

rcb=lucky(match_data,'Royal Challengers Bangalore')
values = rcb
labels=rcb.index
colors = ['turquoise', 'crimson']
fig = go.Figure(data=[go.Pie(labels=labels,values=values,hole=.3)])
fig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,
                  marker=dict(colors=colors, line=dict(color='#000000', width=3)))
fig.update_layout(title="Wins at different Venues for RCB:",
                  titlefont={'size': 30},
                  )
fig.show()

csk=lucky(match_data,'Chennai Super Kings')
values = csk
labels=csk.index
colors = ['turquoise', 'crimson']
fig = go.Figure(data=[go.Pie(labels=labels,values=values,hole=.3)])
fig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,
                  marker=dict(colors=colors, line=dict(color='#000000', width=3)))
fig.update_layout(title="Wins at different Venues for CSK:",
                  titlefont={'size': 30},
                  )
fig.show()

"""###It can be easily seen that team have won the most of its matches at their home venues

#15) Innings wise comparision
"""

runs=ball_data.groupby(['id','inning','batting_team'])[['total_runs']].sum().reset_index()
runs.drop('id',axis=1,inplace=True)
runs.head()

inning1=runs[runs['inning']==1]
inning2=runs[runs['inning']==2]

fig = px.box(y='total_runs',x='batting_team',data_frame=inning1,color='batting_team')

fig.update_layout(title="Batting First",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.show()

"""### Royal Challengers Bangalore and Mumbai Indians median value is better than other teams while batting first.
Royal Challengers Bangalore had scored 250+ in a single match and is the only team to achieve that feat.
"""

fig = px.box(y='total_runs',x='batting_team',data_frame=inning2,color='batting_team')

fig.update_layout(title="Batting Second",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.show()

"""#16) Scored 200+ runs"""

high_scores=ball_data.groupby(['id', 'inning','batting_team','bowling_team'])['total_runs'].sum().reset_index()
score_200=high_scores[high_scores['total_runs']>=200]
score_200.head(5)

x1=score_200['batting_team'].value_counts()
x1=pd.DataFrame(x1)
x1

colors = ['turquoise',] * 11
colors[0] = 'crimson'
fig=px.bar(x=x1.index,y=x1['batting_team'],labels=dict(x="Team Name",y="Count"),)
fig.update_layout(title="Total count of 200+ by batting team",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""###Royal Challengers Bangalore had scored the most 200+ score (18 times), followed by Chennai Super Kings who had scored 17 times.

#17) Conceded 200+ runs
"""

z=score_200['bowling_team'].value_counts()
z=pd.DataFrame(z)
z

colors = ['turquoise',] * 13
colors[0] = 'crimson'
fig=px.bar(x=z.index,y=z['bowling_team'],labels=dict(x="Team Name",y="Count"),)
fig.update_layout(title="Total count of 200+ conceded by bowling team",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""### Kings XI Punjab has conceded 200+ runs 20 times, followed by Royal Challengers Bangalore

#18) Highest runs in an innings
"""

high_200=ball_data.groupby(['id', 'inning','batting_team','bowling_team'])['total_runs'].sum().reset_index()
high_200.set_index(['id'],inplace=True)
high_200

high_200['total_runs'].max()

"""###In season 2013, Royal Challengers Bangalore scored 263/5 against Pune Warriors India.

#19) Biggest win in terms of run margin
"""

match_data[match_data['result_margin']==match_data['result_margin'].max()]

"""### In season 2017, Mumbai Indians had defeated Delhi Daredevils by a huge margin of 146 runs.

#20)Most balls played by a batsman
"""

balls_played=ball_data.groupby(['batsman'])['ball'].count().reset_index()
balls_played.sort_values(by='ball',ascending=False).head(10)

"""###Virat kohli had played the most balls.
David Warner and Chris Gayle are the only two foreign players in this top 10 list.

#21) Top 10 run scorer of all time
"""

runs=ball_data.groupby(['batsman'])['batsman_runs'].sum().reset_index()
runs.columns=['Batsman','runs']
y=runs.sort_values(by='runs',ascending=False).head(10).reset_index().drop('index',axis=1)
y

colors = ['turquoise',] * 13
colors[0] = 'crimson'
fig=px.bar(x=y['Batsman'],y=y['runs'],labels=dict(x="Player",y="Total Runs"),)
fig.update_layout(title="Top 10 leading run-scrorer",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""###Virat Kohli is the leading run scorer in IPL.
One interesting thing to notice that MS Dhoni is the only player in this list who bats down the order.

#22) Most number of 4's
"""

balls_played=balls_played.merge(runs,left_on='batsman',right_on='Batsman',how='outer')
four=ball_data[ball_data['batsman_runs']==4]
runs_4=four.groupby('batsman')['batsman_runs'].count().reset_index()
runs_4.columns=['Batsman','4s']
runs_4.sort_values(by='4s',ascending=False).head(10).reset_index().drop('index',axis=1)

"""###Shikhar Dhawan holds the record for most number of 4's

#23) Most number of 6's
"""

six=ball_data.groupby('batsman')['batsman_runs'].agg(lambda x: (x==6).sum()).reset_index()
six.columns=['Batsman','6s']
six.sort_values(by='6s',ascending=False).head(10).reset_index().drop('index',axis=1)

"""####Chris Gayle had smashed 349 sixes, most by any batsman

#24) Highest Strike rate
"""

player=pd.concat([runs,balls_played.iloc[:,1],runs_4.iloc[:,1],six.iloc[:,1]],axis=1)
player['strike_rate']=player['runs']/player['ball']*100
player['4s'].fillna(0,inplace=True)
player.isnull().values.any()

player.sort_values(by='strike_rate',ascending=False).head(10)

sr=player[player.ball > 100]
sr.sort_values(by='strike_rate',ascending=False).head(10)

reqsr=sr.drop(columns=['runs','ball','4s','6s'],axis=1)
reqsr.sort_values(by='strike_rate',ascending=False).head(10)

"""###Andre Russel has the highest strike rate, followed by K. Gowtham and B. Cutting.

#25) Highest wicket-taker
"""

ball_data['dismissal_kind'].unique()
dismissal_kinds = ['caught', 'bowled', 'lbw', 'caught and bowled',
       'stumped', 'hit wicket']
hwt=ball_data[ball_data["dismissal_kind"].isin(dismissal_kinds)]
bo=hwt['bowler'].value_counts()

colors = ['turquoise',] * 13
colors[0] = 'crimson'
fig=px.bar(x=bo[:10].index,y=bo[:10],labels=dict(x="Bowler",y="Total Wickets"),)
fig.update_layout(title="Leading wicket-takers",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""####L. Malinga is the leading wicket taker in IPL.

#26) Total count of matches played in differnt stadiums
"""

colors = ['turquoise',] * 13
colors[0] = 'crimson'
fig=px.bar(x=match_data['venue'].value_counts()[:10].index,y=match_data['venue'].value_counts()[:10],labels=dict(x="Venue",y="Match count"),)
fig.update_layout(title="Matches played at different stadiums",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""###Eden Gardens has hosted most number of matches.

#27) Man of the Match award
"""

colors = ['turquoise',] * 11
colors[0] = 'crimson'
fig=px.bar(x=match_data.player_of_match.value_counts()[:10].index,y=match_data.player_of_match.value_counts()[:10],labels=dict(x="Players",y="Count"),)
fig.update_layout(title="Top 10 MOM awardee",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""### AB de Villiers (23) had won the most MOM awards, followed by Chris Gayle (22)

#28)  Total number of fours in each season
"""

data_4 = match_data['Season'].unique()

fours_list = []
for var in data_4:
    new_df = match_data[match_data['Season']==var]
    total_fours = 0
    for i in new_df['id'].values:
        temp_df = ball_data[ball_data['id']==i]
        fours = temp_df[temp_df['batsman_runs']==4]['batsman_runs'].count()
        total_fours+=fours
    fours_list.append(total_fours)


colors = ['turquoise',] * 14
colors[5] = 'crimson'
fig=px.bar(x=data_4, y=fours_list,labels=dict(x="Season",y="Total Fours"),)
fig.update_layout(title="Total number of Fours in each season",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""### Highest number of four in a season was is 2013 season while season 2009 had the lowest count of 4's.

#29) Total number of sixes in each season
"""

data_6 = match_data['Season'].unique()

sixes_list = []
for var in data_6:
    new_df = match_data[match_data['Season']==var]
    total_sixes = 0
    for i in new_df['id'].values:
        temp_df = ball_data[ball_data['id']==i]
        sixes = temp_df[temp_df['batsman_runs']==6]['batsman_runs'].count()
        total_sixes+=sixes
    sixes_list.append(total_sixes)

colors = ['turquoise',] * 14
colors[-4] = 'crimson'
fig=px.bar(x=data_4, y=sixes_list,labels=dict(x="Season",y="Total Sixes"),)
fig.update_layout(title="Total number of Sixes in each season",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""###In season 2018, the maximum number of sixes were hit while the lowest was observed in season 2009.

#30) Total runs scored from boundaries in each season
"""

runs4=np.dot(fours_list,4)
runs6=np.dot(sixes_list,6)

k=runs4+runs6
Y=match_data['Season'].unique()
colors = ['turquoise',] * 14
colors[5] = 'crimson'
fig=px.bar(x=Y,y=k,labels=dict(x="Season",y="Total runs"),)
fig.update_layout(title="Total number of runs scored from boundaries in each season",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""###Total run scored from boundaries is lowest in season 2009 and highest in season 2013.

#31) Total contribution of runs from boundaries in each season
"""

totruns=np.array(Season['total_runs'])
res=(k/totruns)*100
res

colors = ['turquoise',] * 14
colors[10] = 'crimson'
fig=px.bar(x=Y,y=res,labels=dict(x="Season",y="Percentage"),)
fig.update_layout(title="Total contribution of runs from boundaries in each season",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""###In season 2018, 59.49 % runs of the total runs came from boundaries while 50.88 % runs came from boundaries in season 2009 which is lowest till now.

#32) Total runs scored by teams in first 6 overs
"""

team = ball_data['batting_team'].unique()
team_runs = []
for var in team:
    temp_df = ball_data[ball_data['batting_team']==var]
    temp_df = temp_df[temp_df['over'].isin([0,1,2,3,4,5])]
    runs = temp_df['total_runs'].sum()
    team_runs.append(runs)
team = pd.DataFrame(data=team_runs, index=team,columns=['Runs In First 6 Overs'])
#team.sort_values('Runs In First 6 Overs', ascending=False, inplace=True)
team.index.name = 'Team'

colors = ['turquoise',] * 15
colors[6] = 'crimson'
fig=px.bar(x=team.index,y=team['Runs In First 6 Overs'],labels=dict(x="Team Name",y="Total runs"),)
fig.update_layout(title="Total runs scored by teams in thier first 6 overs",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""#### Mumbai Indians had scored the most runs in first 6 overs, followed by Kings XI Punjab.

#33) Total runs scored by teams in last 4 overs
"""

team1 = ball_data['batting_team'].unique()
team_runs1 = []
for var in team1:
    temp_df = ball_data[ball_data['batting_team']==var]
    temp_df = temp_df[temp_df['over'].isin([19,18,17,16])]
    runs1 = temp_df['total_runs'].sum()
    team_runs1.append(runs1)
team1 = pd.DataFrame(data=team_runs1, index=team1,columns=['Runs In Last 4 Overs'])
# team.sort_values('Runs In First 6 Overs', ascending=False, inplace=True)
team1.index.name = 'Team'
colors = ['turquoise',] * 15
colors[6] = 'crimson'
fig=px.bar(x=team1.index,y=team1['Runs In Last 4 Overs'],labels=dict(x="Team Name",y="Total runs"),)
fig.update_layout(title="Total runs scored by teams in thier last 4 overs",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""###Mumbai Indians had scored most runs in last 4 overs, followed by Royal Challengers Bangalore.

#34) Highest scoring run-rate in first 6 overs
"""

played1=played.merge(team,left_on='Team Name',right_on='Team',how='inner')
played3=played1.merge(team1,left_on='Team Name',right_on='Team',how='inner')
mintoover=np.dot(played3['Total Matches played'],6)
mintoover1=np.dot(played3['Total Matches played'],4)
played3['RR in first 6 overs']=(played3['Runs In First 6 Overs']/mintoover)
played3['RR in last 4 overs']=(played3['Runs In Last 4 Overs']/mintoover1)
played3

colors = ['turquoise',] * 15
colors[4] = 'crimson'
fig=px.bar(x=played3['Team Name'],y=played3['RR in first 6 overs'],labels=dict(x="Team Name",y="Run Rate"),)
fig.update_layout(title="Run Rate in first 6 overs",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""###Gujarat Lions has the highest scoring run-rate in first 6 overs, followed by Rising Pune Supergiant.

#35)Highest scoring rate in last 4 overs
"""

colors = ['turquoise',] * 15
colors[0] = 'crimson'
fig=px.bar(x=played3['Team Name'],y=played3['RR in last 4 overs'],labels=dict(x="Team Name",y="Run Rate"),)
fig.update_layout(title="Run Rate in last 4 overs",
                  titlefont={'size': 26},template='simple_white'
                  )
fig.update_traces(marker_line_color='black',
                  marker_line_width=2.5, opacity=1,marker_color=colors)
fig.show()

"""####Chennai Super Kings has the highest scoring run-rate in last 4 overs, followed by Mumbai Indians"""

